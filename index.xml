<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端</title>
    <link>http://cuifancastle.github.io/index.xml</link>
    <description>Recent content on 前端</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Feb 2017 14:53:28 +0800</lastBuildDate>
    <atom:link href="http://cuifancastle.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>如何像写java一样写js（代码提示）</title>
      <link>http://cuifancastle.github.io/post/%E5%A6%82%E4%BD%95%E5%83%8F%E5%86%99java%E4%B8%80%E6%A0%B7%E5%86%99js/</link>
      <pubDate>Mon, 20 Feb 2017 14:53:28 +0800</pubDate>
      
      <guid>http://cuifancastle.github.io/post/%E5%A6%82%E4%BD%95%E5%83%8F%E5%86%99java%E4%B8%80%E6%A0%B7%E5%86%99js/</guid>
      <description>&lt;p&gt;需求：
1. 代码提示，能自动识别
&lt;img src=&#34;http://cuifancastle.github.io/imgs/4.png&#34; alt=&#34;&#34; /&gt;
2. 一键生成api文档
&lt;img src=&#34;http://cuifancastle.github.io/imgs/5.png&#34; alt=&#34;&#34; /&gt;
技术：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;jsdoc&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hBuilder jsdoc+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;grunt grunt-jsdoc&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;hBuilder编辑器 对jsdoc进行了扩展，可以实现需求一 &lt;a href=&#34;http://ask.dcloud.net.cn/article/129&#34;&gt;参考这里&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;grunt-jsdoc 可以用来生成api文档
&lt;img src=&#34;http://cuifancastle.github.io/imgs/6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运行grunt doc 即可将js/ 里面符合jsdoc规范的生成doc/下的文档&lt;/p&gt;

&lt;p&gt;截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://cuifancastle.github.io/imgs/7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>riot.js</title>
      <link>http://cuifancastle.github.io/post/riot.js/</link>
      <pubDate>Fri, 10 Feb 2017 17:28:02 +0800</pubDate>
      
      <guid>http://cuifancastle.github.io/post/riot.js/</guid>
      <description>&lt;p&gt;经过一周的技术调研，熟悉下&lt;a href=&#34;http://riotjs.com&#34;&gt;riot&lt;/a&gt;的用法&lt;/p&gt;

&lt;p&gt;总结下riot的特点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;结合了react,vue的写法，独特的 custom tags(自定义标签)

&lt;ol&gt;
&lt;li&gt;内置语法把html,js,css写在一个文件(组件里) 有点像vue的 &lt;a href=&#34;http://cn.vuejs.org/v2/guide/single-file-components.html&#34;&gt;单文件组件*.vue&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;更新视图

&lt;ol&gt;
&lt;li&gt;当父标签改变状态，有两个方式让子标签更新视图，一是自身表达式，二是this.on(&amp;lsquo;update&amp;rsquo;,()=&amp;gt;{})&lt;/li&gt;
&lt;li&gt;当异步改变状态时，需要调用this.update方法&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;yield 可以将自定义标签内部模板进行编译和插入，有from ,to 属性 可以指定&lt;/li&gt;
&lt;li&gt;事件，需要手动停止冒号，如果对组件内部事件感兴趣，需要手动添加 [data-role=&amp;ldquo;]，做事件代理&lt;/li&gt;

&lt;li&gt;&lt;p&gt;看过&lt;a href=&#34;http://www.tuicool.com/articles/U3UbIv7&#34;&gt;riot风格规范&lt;/a&gt;，感觉这么写代码相当棒，太简单了
一些问题&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若组件写一次多端运行，需要react native做支持，riot编译成react 麻烦&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务器端渲染，seo优化，render函数不完善&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>ajax</title>
      <link>http://cuifancastle.github.io/post/ajax/</link>
      <pubDate>Thu, 09 Feb 2017 14:53:28 +0800</pubDate>
      
      <guid>http://cuifancastle.github.io/post/ajax/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;最早接触ajax是从  &lt;a href=&#34;http://www.runoob.com/ajax/ajax-tutorial.html&#34;&gt;菜鸟教程&lt;/a&gt; 里过了一遍&lt;/li&gt;
&lt;li&gt;之后一直用 &lt;a href=&#34;http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp&#34;&gt;jquery.ajax&lt;/a&gt;,傻傻的只会 $.get,$.post&lt;/li&gt;
&lt;li&gt;有必要重新认识下&lt;a href=&#34;http://jquery.cuishifeng.cn/jQuery.Ajax.html&#34;&gt;jquery.ajax中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;重新认识下&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started&#34;&gt;ajax-MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;举些没怎么用过的东西（jquery里）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;jsonp&lt;/li&gt;
&lt;li&gt;headers&lt;/li&gt;
&lt;li&gt;mimeType&lt;/li&gt;
&lt;li&gt;statusCode&lt;/li&gt;
&lt;li&gt;timeout&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/lihuiyy/archive/2012/07/17/2596468.html&#34;&gt;jQuery 中的 Ajax 全局事件&lt;/a&gt; , 做复杂单页应用时接触过ajaxError(callback)：Ajax请求出现错误时触发该事件&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>flux</title>
      <link>http://cuifancastle.github.io/post/flux/</link>
      <pubDate>Thu, 09 Feb 2017 12:02:08 +0800</pubDate>
      
      <guid>http://cuifancastle.github.io/post/flux/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;[Flux 架构入门教程]by阮一峰，里面概念讲的好
&lt;img src=&#34;http://cuifancastle.github.io/imgs/2.png&#34; alt=&#34;&#34; /&gt;
demo还是看&lt;a href=&#34;https://facebook.github.io/flux/docs/overview.html#content&#34;&gt;官网&lt;/a&gt;的吧&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>跨域</title>
      <link>http://cuifancastle.github.io/post/%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Thu, 09 Feb 2017 09:55:50 +0800</pubDate>
      
      <guid>http://cuifancastle.github.io/post/%E8%B7%A8%E5%9F%9F/</guid>
      <description>&lt;p&gt;一. 同源策略&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/joyhen/article/details/21631833&#34;&gt;前端解决跨域问题的8种方案&lt;/a&gt;里面同源策略列了个表格很直观
&lt;img src=&#34;http://cuifancastle.github.io/imgs/1.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;对于测试环境，我一般简单粗暴的直接设置&lt;a href=&#34;http://www.cnblogs.com/cshi/p/5660039.html&#34;&gt;Chrome浏览器支持跨域&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;二. 可能用到&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location&#34;&gt;window.location&lt;/a&gt; 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>ie兼容问题</title>
      <link>http://cuifancastle.github.io/post/first/</link>
      <pubDate>Sun, 25 Oct 2015 08:36:54 -0700</pubDate>
      
      <guid>http://cuifancastle.github.io/post/first/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;first&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后兼容ie8  用的是这种写法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;background-color: rgba(0,0,0,0.6);
filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#60000000,endColorstr=#60000000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#60000000前两位为透明度，后面是色值， 渐变也这么写从xx颜色到xx颜色&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;参考摘自&lt;a href=&#34;http://blog.csdn.net/tenpage/article/details/33725909&#34;&gt;blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CSS &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity?redirectlocale=en-US&amp;amp;redirectslug=CSS%2Fopacity&#34;&gt;opacity介绍&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;首先，Opacity属性用来设置一个元素的透明度，取值范围是0~1之间，不可为负值。
opacity取值为1是完全不透明，取值为0是完全透明，视觉上看不见。
关于浏览器对opacity属性的兼容性请继续往下看：&lt;/p&gt;

&lt;p&gt;从Firefox3.5+不再支持私有属性-moz-opacity了，
在Mozilla 1.7 (Firefox 0.9)之前FF都是使用这个私有属性的，
Firefox 0.9-Firefox3同时支持-moz-opacity和opacity这两个属性，
现在回想起刚入职场不久那时候，正好是Firefox升级到3.5之后，
一些做好的页面透明效果突然没有了，如今已经CSS3铺天盖地，概叹时光荏苒啊。&lt;/p&gt;

&lt;p&gt;IE9+才开始支持CSS3 opacity，而对IE6-IE8我们习惯使用filter滤镜属性来进行实现。
IE4-IE9都支持滤镜写法progid:DXImageTransform.Microsoft.Alpha(Opacity=xx).&lt;/p&gt;

&lt;p&gt;IE8又引入了特殊的-ms-filter，IE认为这种写法是对旧写法的一次更正，更符合规范，
这个写法的属性值只是多了一对引号，效果同前。不过，这种写法的寿命也不长，
到IE10对filter与-ms-filter都已经不再支持。&lt;/p&gt;

&lt;p&gt;Safari 1.2之前的版本，是基于khtml的浏览器内核，1.2版发布后，
不再支持-khtml-opacity的写法，-khtml-opacity也随之成为历史。&lt;/p&gt;

&lt;p&gt;Konqueror从未支持过-khtml-opacity，从4.0版本开始已经支持opacity。&lt;/p&gt;

&lt;p&gt;除IE外，目前主流浏览器 Opera 9.0+，Safari  1.2(WebKit 125) +，chrome等等都支持opacity这个透明度属性。&lt;/p&gt;

&lt;p&gt;IE 从4.0版开始，就提供了一些内置的多媒体滤镜特效，具体的使用方法是：
语法：&lt;/p&gt;

&lt;p&gt;filter : filter&lt;/p&gt;

&lt;p&gt;参数：&lt;/p&gt;

&lt;p&gt;filter : 　要使用的滤镜效果。多个滤镜之间用空格隔开。&lt;/p&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;设置或检索对象所应用的滤镜效果。
要使用该属性，对象必须具有height，width，position三个属性中的一个。
滤镜的机制是可扩展的。可以开发和使用第三方滤镜。
该属性在MAC平台上不可用。
对应的脚本特性为filter。&lt;/p&gt;

&lt;p&gt;IE4.0以上版本，支持以下14种滤镜：&lt;/p&gt;

&lt;p&gt;滤镜名    说明&lt;/p&gt;

&lt;p&gt;Alpha     让HTML元件呈现出透明的渐进效果
Blur     让HTML元件产生风吹模糊的效果
Chroma     让图像中的某一颜色变成透明色
DropShadow     让HTML元件有一个下落式的阴影
FlipH     让HTML元件水平翻转
FlipV     让HTML元件垂直翻转
Glow     在元件的周围产生光晕而模糊的效果
Gray     把一个彩色的图片变成黑白色
Invert     产生图片的照片底片的效果
Light     在HTML元件上放置一个光影
Mask     利用另一个HTML元件在另一个元件上产生图像的遮罩
Shadow     产生一个比较立体的阴影
Wave     让HTML元件产生水平或是垂直方向上的波浪变形
XRay     产生HTML元件的轮廓，就像是照X光一样&lt;/p&gt;

&lt;p&gt;Alpha 滤镜参数详解&lt;/p&gt;

&lt;p&gt;参数名     说明     取值说明
Opacity     不透明的程度，百分比。    从0到100，0表是完全透明，100表示完全不透明。
FinishOpacity     这是一个同Opacity一起使用的选择性的参数，当同时Opacity和FinishOpacity时，可以制作出透明渐进的效果，比较酷。    从0到100，0表是完全透明，100表示完全不透明。
Style     当同时设定了Opacity和finishOpacity产生透明渐进时，它主要是用赤指定渐进的显示形状。    0：没有渐进；1：直线渐进；2：圆形渐进；3：矩形辐射。
StartX     渐进开始的 X 坐标值
StartY     渐进开始的 Y 坐标值
FinishX     渐进结束的 X 坐标值
FinishY     渐进结束的 Y 坐标值&lt;/p&gt;

&lt;p&gt;下面通过一个例子来测试filter和opacity的兼容性：
Html代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    &amp;lt;meta charset=utf-8 /&amp;gt;
    &amp;lt;title&amp;gt;JS Bin&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;div class=&amp;quot;transparent_class&amp;quot;&amp;gt;测试透明度&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
````
注意：测试不要忘了写DOCTYPE，否则会偏离真实效果。
对应CSS代码：
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;.transparent_class {
    /* Required for IE 5, 6, 7 */
    /* ...or something to trigger hasLayout, like zoom: 1; */
    width:300px;
    height:300px;
    line-height:300px;
    text-align:center;
    background:#000;
    color:#fff;
    /* older safari/Chrome browsers */
    -webkit-opacity: 0.5;
    /* Netscape and Older than Firefox 0.9 */
    -moz-opacity: 0.5;
    /* Safari 1.x (pre WebKit!) 老式khtml内核的Safari浏览器*/
    -khtml-opacity: 0.5;
    /* IE9 + etc...modern browsers */
    opacity: .5;
    /* IE 4-9 */
    filter:alpha(opacity=50);
    /*This works in IE 8 &amp;amp; 9 too*/
    -ms-filter:&amp;quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&amp;quot;;
    /*IE4-IE9*/
    filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=50);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```
使用中，我们可以根据要适配的浏览器/版本，从上面选择自己需要的代码行。如果要全面支持所有浏览器，至少需要有关opacity或filter的前5句。
需要声明的是，如果你要同时使用filter和-ms-filter，请将-ms-filter写在filter的前面。原文描述如下：&lt;/p&gt;

&lt;p&gt;If you want opacity to also work in IE8′s emulating IE7 mode, the order should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[css] view plain copy
-ms-filter:”progid:DXImageTransform.Microsoft.Alpha(Opacity=50)”; // first
filter: alpha(opacity=50); // second
If you don’t use this order, IE8 emulating IE7 doesn’t apply the opacity, although IE8 and IE7 native do.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基于统计的CSS属性支持可以参照caniuse网站&lt;a href=&#34;http://caniuse.com/css-opacity&#34;&gt;http://caniuse.com/css-opacity&lt;/a&gt;
参考文献：CSS opacity介绍 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity?redirectlocale=en-US&amp;amp;redirectslug=CSS%2Fopacity&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity?redirectlocale=en-US&amp;amp;redirectslug=CSS%2Fopacity&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>